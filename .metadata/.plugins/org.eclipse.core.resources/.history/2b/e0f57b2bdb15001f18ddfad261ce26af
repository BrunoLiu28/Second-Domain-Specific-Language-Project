/*
 * generated by Xtext 2.34.0
 */
package org.xtext.example.mydsl.ui.contentassist;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.ui.editor.contentassist.ContentAssistContext;
import org.eclipse.xtext.ui.editor.contentassist.ICompletionProposalAcceptor;

import simplemioModel.Action;
import simplemioModel.Sensor;

/**
 * See https://www.eclipse.org/Xtext/documentation/310_eclipse_support.html#content-assist
 * on how to customize the content assistant.
 */
public class SimpleMioProposalProvider extends AbstractSimpleMioProposalProvider {
	
	@Override
    public void completeSensor_SensorSpecifier(EObject model, Assignment assignment, ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
		
		if (model instanceof Sensor) {
	        Sensor sensor = (Sensor) model;
	        String sensorName = sensor.getSensorName();
	        
	        if (sensorName != null) {
	        	acceptor = new FilteredCompletionProposalAcceptor(acceptor);
	            switch (sensorName) {
	                case "obstacle":
	                    acceptor.accept(createCompletionProposal("front", context));
	                    acceptor.accept(createCompletionProposal("back", context));
	                    acceptor.accept(createCompletionProposal("left", context));
	                    acceptor.accept(createCompletionProposal("right", context));
	                    break;
	                case "line":
	                    acceptor.accept(createCompletionProposal("left", context));
	                    acceptor.accept(createCompletionProposal("right", context));
	                    break;
	                case "button":
	                    acceptor.accept(createCompletionProposal("left", context));
	                    acceptor.accept(createCompletionProposal("right", context));
	                    acceptor.accept(createCompletionProposal("up", context));
	                    acceptor.accept(createCompletionProposal("down", context));
	                    acceptor.accept(createCompletionProposal("center", context));
	                    break;
	            }
	        }
	    }
    }
	
	
	@Override
	public void completeAction_ActionSpecifier(EObject model, Assignment assignment, ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
		if (model instanceof Action) {
	        Action action = (Action) model;
	        String actionName = action.getActionName();
	        
	        if (actionName != null) {
	        	acceptor = new FilteredCompletionProposalAcceptor(acceptor);
	            switch (actionName) {
	                case "move":
	                    acceptor.accept(createCompletionProposal("forward","forward", null, context));
	                    acceptor.accept(createCompletionProposal("backward","backward", null, context));
	                    acceptor.accept(createCompletionProposal("stop","stop", null, context));
	                    break;
	                case "led":
	                    acceptor.accept(createCompletionProposal("red", context));
	                    acceptor.accept(createCompletionProposal("green", context));
	                    acceptor.accept(createCompletionProposal("blue", context));
	                    break;
	                case "turn":
	                    acceptor.accept(createCompletionProposal("left", context));
	                    acceptor.accept(createCompletionProposal("right", context));
	                    break;
	            }
	        }
	    }
	}
	
	// Helper class to filter proposals
    private static class FilteredCompletionProposalAcceptor implements ICompletionProposalAcceptor {
        private final ICompletionProposalAcceptor delegate;

        public FilteredCompletionProposalAcceptor(ICompletionProposalAcceptor delegate) {
            this.delegate = delegate;
        }

        @Override
        public void accept(org.eclipse.xtext.ui.editor.contentassist.ICompletionProposal proposal) {
            if (proposal instanceof org.eclipse.xtext.ui.editor.contentassist.ConfigurableCompletionProposal) {
                ((org.eclipse.xtext.ui.editor.contentassist.ConfigurableCompletionProposal) proposal).setAutoInsertable(true);
            }
            delegate.accept(proposal);
        }

        @Override
        public boolean canAcceptMoreProposals() {
            return delegate.canAcceptMoreProposals();
        }
    }
}
