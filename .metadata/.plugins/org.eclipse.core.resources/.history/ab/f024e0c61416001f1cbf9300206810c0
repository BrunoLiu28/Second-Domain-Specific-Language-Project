/*
 * generated by Xtext 2.34.0
 */
package org.xtext.example.mydsl.tests

import com.google.inject.Inject
import org.eclipse.xtext.testing.InjectWith
import org.eclipse.xtext.testing.extensions.InjectionExtension
import org.eclipse.xtext.testing.util.ParseHelper
import org.junit.jupiter.api.Assertions
import org.junit.jupiter.api.Test
import org.junit.jupiter.api.^extension.ExtendWith
import simplemioModel.Model

@ExtendWith(InjectionExtension)
@InjectWith(SimpleMioInjectorProvider)
class SimpleMioParsingTest {
	@Inject
	ParseHelper<Model> parseHelper

	@Test
	def void loadModel() {
		val result = parseHelper.parse('''
			obstacle front -> move forward, turn left
			line left -> led red
		''')
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty(), "It was suppose to not find any parsing errors and found one");
	}
	
	@Test
    def void testMultipleEvents() {
        val result = parseHelper.parse('''
            obstacle front -> move forward, turn left
            line left -> led red
        ''')
        Assertions.assertNotNull(result)
        val errors = result.eResource().getErrors()
        Assertions.assertTrue(errors.isEmpty(), "It was suppose to not find any parsing errors and found one")
    }
    
    @Test
    def void testInvalidEvent() {
        val result = parseHelper.parse('''
            obstacle -> move forward
        ''')
        val errors = result.eResource().getErrors()
        Assertions.assertFalse(errors.isEmpty(), "Expected errors but found none")
    }
    
    @Test
    def void testConditionalSensors() {
        val result = parseHelper.parse('''
            (obstacle front or line left) -> move forward, turn left
        ''')
        Assertions.assertNotNull(result)
        val errors = result.eResource().getErrors()
        Assertions.assertTrue(errors.isEmpty(), "It was suppose to not find any parsing errors and found one")
    }
    
    @Test
    def void testNotCondition() {
        val input = parseHelper.parse('''
            not (obstacle front) -> turn left
        ''')
        Assertions.assertNotNull(input)
        val errors = input.eResource().getErrors()
        Assertions.assertTrue(errors.isEmpty(), "It was suppose to not find any parsing errors and found one")
    }

    @Test
    def void testNestedConditions() {
        val input = parseHelper.parse('''
            ((obstacle front or line left) and not (button center)) -> move forward
        ''')
        Assertions.assertNotNull(input)
        val errors = input.eResource().getErrors()
        Assertions.assertTrue(errors.isEmpty(), "It was suppose to not find any parsing errors and found one")
    }

    @Test
    def void testMultipleActions() {
    	val input = parseHelper.parse('''
            obstacle front -> move forward, turn left, led red
        ''')
        Assertions.assertNotNull(input)
        val errors = input.eResource().getErrors()
        Assertions.assertTrue(errors.isEmpty(), "It was suppose to not find any parsing errors and found one")
    }

    @Test
    def void testInvalidActionSpecifier() {
    	val input = parseHelper.parse('''
            obstacle front -> move forwards
        ''')
        Assertions.assertNotNull(input)
        val errors = input.eResource().getErrors()
        Assertions.assertFalse(errors.isEmpty(), "Expected errors but found none")
    }

    @Test
    def void testNoActionSpecifier() {
    	val input = parseHelper.parse('''
            obstacle front -> move
        ''')
        Assertions.assertNotNull(input)
        val errors = input.eResource().getErrors()
        Assertions.assertFalse(errors.isEmpty(), "Expected errors but found none")
    }
    @Test
    public void testMissingAction() {
        val input = parseHelper.parse('''
            obstacle front ->
        ''');
        Assertions.assertNotNull(input);
        val errors = input.eResource().getErrors();
        Assertions.assertFalse(errors.isEmpty(), "Expected errors but found none");
    }

    @Test
    public void testInvalidNestedConditions() {
        val input = parseHelper.parse('''
            (obstacle front or (line left and)) -> move forward
        ''');
        Assertions.assertNotNull(input);
        val errors = input.eResource().getErrors();
        Assertions.assertFalse(errors.isEmpty(), "Expected errors but found none");
    }

    @Test
    public void testInvalidNotCondition() {
        val input = parseHelper.parse('''
            not obstacle front -> turn left
        ''');
        Assertions.assertNotNull(input);
        val errors = input.eResource().getErrors();
        Assertions.assertFalse(errors.isEmpty(), "Expected errors but found none");
    }
}
