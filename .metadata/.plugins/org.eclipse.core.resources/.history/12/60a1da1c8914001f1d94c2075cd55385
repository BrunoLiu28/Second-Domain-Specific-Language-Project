/*
 * generated by Xtext 2.34.0
 */
package org.xtext.example.mydsl.validation;

import org.eclipse.xtext.validation.Check;

import simplemioModel.Action;
import simplemioModel.Event;
import simplemioModel.Sensor;
import simplemioModel.SimplemioModelPackage;

/**
 * This class contains custom validation rules. 
 *
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
public class SimpleMioValidator extends AbstractSimpleMioValidator {
	
//	public static final String INVALID_NAME = "invalidName";
//
//	@Check
//	public void checkGreetingStartsWithCapital(Greeting greeting) {
//		if (!Character.isUpperCase(greeting.getName().charAt(0))) {
//			warning("Name should start with a capital",
//					SimpleMioPackage.Literals.GREETING__NAME,
//					INVALID_NAME);
//		}
//	}
	
	public static final String INVALID_MOVE_ACTION_SPECIFIER = "invalidMoveActionSpecifier";
	public static final String INVALID_LED_ACTION_SPECIFIER = "invalidLedActionSpecifier";
	public static final String INVALID_TURN_ACTION_SPECIFIER = "invalidTurnActionSpecifier";
	@Check
	public void checkActionSpecifier(Action action) {
		switch (action.getActionName()) {
			case "move": {
				if (!(action.getActionSpecifier().equals("forward") ||  action.getActionSpecifier().equals("backward") || action.getActionSpecifier().equals("stop"))) {
					error("Invalid specifier '" + action.getActionSpecifier() +  "' used for 'move'",
							action,
							SimplemioModelPackage.eINSTANCE.getAction_ActionSpecifier(), 
							INVALID_MOVE_ACTION_SPECIFIER);
				}
				break;
			}
			
			case "led": {
				if (!("redbluegreen".contains(action.getActionSpecifier()))) {
					error("Invalid specifier '" + action.getActionSpecifier() +  "' used for 'led'",
							action,
							SimplemioModelPackage.eINSTANCE.getAction_ActionSpecifier(),
							INVALID_LED_ACTION_SPECIFIER);
				}
				break;
			}
			
			case "turn": {
				if (!(action.getActionSpecifier().equals("left") ||  action.getActionSpecifier().equals("right"))) {
					error("Invalid specifier '" + action.getActionSpecifier() +  "' used for 'turn'",
							action,
							SimplemioModelPackage.eINSTANCE.getAction_ActionSpecifier(),
							INVALID_TURN_ACTION_SPECIFIER);
				}
				break;
			}
		}
	}
	
	public static final String INVALID_OBSTACLE_SENSOR_SPECIFIER = "invalidObstacleSensorSpecifier";
	public static final String INVALID_LINE_SENSOR_SPECIFIER = "invalidLineSensorSpecifier";
	public static final String INVALID_SOUND_SENSOR_SPECIFIER = "invalidSoundSensorSpecifier";
	public static final String INVALID_BUTTON_SENSOR_SPECIFIER = "invalidButtonSensorSpecifier";
	public static final String INVALID_MOTOR_SENSOR_SPECIFIER = "invalidMotorSensorSpecifier";
	
	@Check
	public void checkSensorSpecifier(Sensor sensor) {
		switch (sensor.getSensorName()) {
			case "obstacle": {
				if (!"frontbackleftright".contains(sensor.getSensorSpecifier())) {
					error("Invalid specifier '" + sensor.getSensorSpecifier() + "' used for 'obstacle",
							sensor,
							SimplemioModelPackage.eINSTANCE.getSensor_SensorSpecifier(),
							INVALID_OBSTACLE_SENSOR_SPECIFIER);
				}
				break;
			}
			case "line": {
				if (!"leftright".contains(sensor.getSensorSpecifier())) {
					error("Invalid specifier '" + sensor.getSensorSpecifier() + "' used for 'line",
							sensor,
							SimplemioModelPackage.eINSTANCE.getSensor_SensorSpecifier(),
							INVALID_LINE_SENSOR_SPECIFIER);
				}
				break;
			}
			case "sound": {
				if (sensor.getSensorSpecifier() != null) {
					error("Invalid specifier '" + sensor.getSensorSpecifier() + "' used for 'sound'. Sound does not have any specifier",
							sensor,
							SimplemioModelPackage.eINSTANCE.getSensor_SensorSpecifier(),
							INVALID_SOUND_SENSOR_SPECIFIER);
				}
				break;
			}
			case "button": {
				if (!"leftrightupdowncenter".contains(sensor.getSensorSpecifier())) {
					error("Invalid specifier '" + sensor.getSensorSpecifier() + "' used for 'line",
							sensor,
							SimplemioModelPackage.eINSTANCE.getSensor_SensorSpecifier(),
							INVALID_BUTTON_SENSOR_SPECIFIER);
				}
				break;
			}
			case "motor": {
				if (sensor.getSensorSpecifier() != null) {
					error("Invalid specifier '" + sensor.getSensorSpecifier() + "' used for 'motor'. Motor does not have any specifier",
							sensor,
							SimplemioModelPackage.eINSTANCE.getSensor_SensorSpecifier(),
							INVALID_MOTOR_SENSOR_SPECIFIER);
				}
				break;
			}
		}
	}
	
	public static final String MISSING_SPECIFIER = "missingSpecifier";
	
	@Check
	public void check_missing_specifier(Sensor sensor) {
		if (!"soundmotor".contains(sensor.getSensorName()) && sensor.getSensorSpecifier() == null) {
			error("Sensor '" + sensor.getSensorName() + "' requires a specifier",
					sensor,
					SimplemioModelPackage.eINSTANCE.getSensor_SensorName(),
					MISSING_SPECIFIER);
		}
	}
	
	public static final String INVALID_INTENSITY = "invalidIntensity";
	public static final String INVALID_VALUE_INTENSITY = "invalidValueIntensity";
	
	@Check
	public void check_intensity(Sensor sensor) {
		if (sensor.getSensorName().equals("motor") && sensor.getStrength() != 0) {
			error("Motor does not support sensor intensity",
					sensor,
					SimplemioModelPackage.eINSTANCE.getSensor_Strength(),
					INVALID_INTENSITY);
		} else if (sensor.getStrength() < 0 || sensor.getStrength() > 10) {
			error("Invalid value " + sensor.getStrength() + " for sensor intensity",
					sensor,
					SimplemioModelPackage.eINSTANCE.getSensor_Strength(),
					INVALID_VALUE_INTENSITY);
					
		}
	}
	
	@Check
	public void check_intensity(Action action) {
		if (action.getStrength() < 0 || action.getStrength() > 10) {
			error("Invalid value " + action.getStrength() + " for action intensity",
					action,
					SimplemioModelPackage.eINSTANCE.getAction_Strength(),
					INVALID_VALUE_INTENSITY);
					
		}
	}
	
	public static final String SAME_ACTUATOR_ACTION = "sameActuatorAction";
	
	@Check
	public void check_action_from_same_actuator(Event event) {
		boolean hasLed = false;
		boolean hasMoveOrTurn = false;
		
		for (Action a : event.getActions()) {
			if (a.getActionName().equals("led")) {
				if (hasLed) {
					error("Cannot have more than one led action",
							a,
							SimplemioModelPackage.eINSTANCE.getAction_ActionName(),
							SAME_ACTUATOR_ACTION);
				} else {
					hasLed = true;
				}
			} else if ("turnmove".contains(a.getActionName())) {
				if (hasMoveOrTurn) {
					error("Cannot have more than one turn or move action",
							a,
							SimplemioModelPackage.eINSTANCE.getAction_ActionName(),
							SAME_ACTUATOR_ACTION);
				} else {
					hasMoveOrTurn = true;
				}
			}
		}
			
	}
	
	
	@Check
    public void check_action_from_same_actuator(Event event) {
        boolean hasLed = false;
        boolean hasMoveOrTurn = false;

        for (int i = 0; i < event.getActions().size(); i++) {
            Action a = event.getActions().get(i);
            String actionName = a.getActionName();

            if (actionName.equals("led")) {
                if (hasLed) {
                    reportDuplicateActionError(event, i);
                } else {
                    hasLed = true;
                }
            } else if ("turnmove".contains(actionName)) {
                if (hasMoveOrTurn) {
                    reportDuplicateActionError(event, i);
                } else {
                    hasMoveOrTurn = true;
                }
            }
        }
    }

    private void reportDuplicateActionError(Event event, int index) {
        Action duplicateAction = event.getActions().get(index);
        Action previousAction = event.getActions().get(index - 1);

        ICompositeNode node = NodeModelUtils.getNode(previousAction);
        int previousActionEndOffset = node.getOffset() + node.getLength();

        String documentText = NodeModelUtils.getTokenText(NodeModelUtils.getNode(event));
        int commaOffset = previousActionEndOffset;

        // Adjust for comma and space
        if (commaOffset < documentText.length() && documentText.charAt(commaOffset) == ',') {
            commaOffset++;
            if (commaOffset < documentText.length() && documentText.charAt(commaOffset) == ' ') {
                commaOffset++;
            }
        }

        int duplicateActionOffset = NodeModelUtils.getNode(duplicateAction).getOffset();
        int duplicateActionLength = NodeModelUtils.getNode(duplicateAction).getLength();

        int errorOffset = previousActionEndOffset;
        int errorLength = (duplicateActionOffset + duplicateActionLength) - previousActionEndOffset;

        error("Cannot have more than one " + duplicateAction.getActionName() + " action",
                duplicateAction,
                SimplemioModelPackage.eINSTANCE.getAction_ActionName(),
                SAME_ACTUATOR_ACTION,
                errorOffset,
                errorLength);
    }
	
}