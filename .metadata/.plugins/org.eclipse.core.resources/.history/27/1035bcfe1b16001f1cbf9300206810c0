/*
 * generated by Xtext 2.34.0
 */
package org.xtext.example.mydsl.tests

import com.google.inject.Inject
import org.eclipse.xtext.testing.InjectWith
import org.eclipse.xtext.testing.extensions.InjectionExtension
import org.eclipse.xtext.testing.util.ParseHelper
import org.junit.jupiter.api.Assertions
import org.junit.jupiter.api.Test
import org.junit.jupiter.api.^extension.ExtendWith
import simplemioModel.Model
import org.eclipse.xtext.testing.validation.ValidationTestHelper
import org.xtext.example.mydsl.validation.SimpleMioValidator
import simplemioModel.SimplemioModelPackage

@ExtendWith(InjectionExtension)
@InjectWith(SimpleMioInjectorProvider)
class SimpleMioParsingTest {
	@Inject
	ParseHelper<Model> parseHelper

	@Inject
	ValidationTestHelper validator

	@Test
	def void loadModel() {
		val input = parseHelper.parse('''
			obstacle front -> move forward, turn left
			line left -> led red @99
		''')
		Assertions.assertNotNull(input)
		val errors = input.eResource.errors
		Assertions.assertTrue(errors.isEmpty(), "It was suppose to not find any parsing errors and found one");
		validator.assertError(input, SimplemioModelPackage::eINSTANCE.action, SimpleMioValidator::SAME_ACTUATOR_ACTION,
			"Cannot have more than one turn or move action")
	}

	@Test
	def void testMultipleEvents() {
		val input = parseHelper.parse('''
			obstacle front -> move forward, turn left
			line left -> led red @99
		''')
		Assertions.assertNotNull(input)
		val errors = input.eResource.errors
		Assertions.assertTrue(errors.isEmpty(), "It was suppose to not find any parsing errors and found one");
		validator.assertError(input, SimplemioModelPackage::eINSTANCE.action, SimpleMioValidator::SAME_ACTUATOR_ACTION,
			"Cannot have more than one turn or move action")
	}

	@Test
	def void testInvalidEvent() {
		val input = parseHelper.parse('''
			obstacle -> move forward
		''')
		Assertions.assertNotNull(input)
		val errors = input.eResource().getErrors()
		Assertions.assertTrue(errors.isEmpty(), "It was suppose to not find any parsing errors and found one")
		validator.assertError(input, SimplemioModelPackage::eINSTANCE.sensor, SimpleMioValidator::MISSING_SPECIFIER,
			"Sensor 'obstacle' requires a specifier")
	}

	@Test
	def void testConditionalSensors() {
		val input = parseHelper.parse('''
			(obstacle front or line left) -> move forward
		''')
		Assertions.assertNotNull(input)
		val errors = input.eResource().getErrors()
		Assertions.assertTrue(errors.isEmpty(), "It was suppose to not find any parsing errors and found one")
		validator.assertNoError(input, "It was suppose to not find any type checking errors and found one")
	}

	@Test
	def void testNotCondition() {
		val input = parseHelper.parse('''
			not (obstacle front) -> turn left @3
		''')
		Assertions.assertNotNull(input)
		val errors = input.eResource().getErrors()
		Assertions.assertTrue(errors.isEmpty(), "It was suppose to not find any parsing errors and found one")
		validator.assertNoError(input, "It was suppose to not find any type checking errors and found one")
	}

	@Test
	def void testNestedConditions() {
		val input = parseHelper.parse('''
			((obstacle front or line left) and not (button center)) -> move left
		''')
		Assertions.assertNotNull(input)
		val errors = input.eResource().getErrors()
		Assertions.assertTrue(errors.isEmpty(), "It was suppose to not find any parsing errors and found one")
		validator.assertError(input, SimplemioModelPackage::eINSTANCE.action, SimpleMioValidator::INVALID_MOVE_ACTION_SPECIFIER,
			"Invalid specifier 'left' used for 'move'")
	}

	@Test
	def void testMultipleActions() {
		val input = parseHelper.parse('''
			obstacle front -> move forward, turn left, led red
		''')
		Assertions.assertNotNull(input)
		val errors = input.eResource().getErrors()
		Assertions.assertTrue(errors.isEmpty(), "It was suppose to not find any parsing errors and found one")
		validator.assertError(input, SimplemioModelPackage::eINSTANCE.action, SimpleMioValidator::SAME_ACTUATOR_ACTION,
			"Cannot have more than one turn or move action")
	}

	@Test
	def void testInvalidActionSpecifier() {
		val input = parseHelper.parse('''
			obstacle front -> move forwards
		''')
		Assertions.assertNotNull(input)
		val errors = input.eResource().getErrors()
		Assertions.assertFalse(errors.isEmpty(), "Expected errors but found none")
	}

	@Test
	def void testNoActionSpecifier() {
		val input = parseHelper.parse('''
			obstacle front -> forward
		''')
		Assertions.assertNotNull(input)
		val errors = input.eResource().getErrors()
		Assertions.assertFalse(errors.isEmpty(), "Expected errors but found none")
	}

	@Test
	def void testMissingAction() {
		val input = parseHelper.parse('''
			obstacle front ->
		''')
		Assertions.assertNotNull(input)
		val errors = input.eResource().getErrors();
		Assertions.assertFalse(errors.isEmpty(), "Expected errors but found none")
	}

	@Test
	def void testInvalidNestedConditions() {
		val input = parseHelper.parse('''
			(obstacle front or (line left and)) -> move forward
		''')
		Assertions.assertNotNull(input)
		val errors = input.eResource().getErrors()
		Assertions.assertFalse(errors.isEmpty(), "Expected errors but found none")
	}

	@Test
	def void testInvalidNotCondition() {
		val input = parseHelper.parse('''
			not obstacle front -> turn left 
		''')
		Assertions.assertNotNull(input)
		val errors = input.eResource().getErrors()
		Assertions.assertTrue(errors.isEmpty(), "It was suppose to not find any parsing errors and found one")
		validator.assertNoError(input, "It was suppose to not find any type checking errors and found one")
	}

	@Test
	def void testValidStop() {
		val input = parseHelper.parse('''
			obstacle front -> stop
		''')
		Assertions.assertNotNull(input)
		val errors = input.eResource().getErrors()
		Assertions.assertTrue(errors.isEmpty(), "It was suppose to not find any parsing errors and found one")
		validator.assertNoError(input, "It was suppose to not find any type checking errors and found one")
	}

	@Test
	def void testInvalidStop() {
		val input = parseHelper.parse('''
			obstacle front -> stop left
		''')
		Assertions.assertNotNull(input)
		val errors = input.eResource().getErrors()
		Assertions.assertTrue(errors.isEmpty(), "Expected errors but found none")
		validator.assertError(input, SimplemioModelPackage::eINSTANCE.action, SimpleMioValidator::INVALID_STOP_ACTION_SPECIFIER,
			"Cannot have more than one turn or move action")
	}
}
