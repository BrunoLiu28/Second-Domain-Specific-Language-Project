/*
 * generated by Xtext 2.34.0
 */
package org.xtext.example.mydsl.ui.contentassist;

import java.awt.Event;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EReference;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.resource.IEObjectDescription;
import org.eclipse.xtext.scoping.IScope;
import org.eclipse.xtext.ui.editor.contentassist.ContentAssistContext;
import org.eclipse.xtext.ui.editor.contentassist.ICompletionProposalAcceptor;

import simplemioModel.Sensor;

/**
 * See https://www.eclipse.org/Xtext/documentation/310_eclipse_support.html#content-assist
 * on how to customize the content assistant.
 */
public class SimpleMioProposalProvider extends AbstractSimpleMioProposalProvider {
	
//	@Override
//	public void completeSensor_SensorSpecifier(EObject model, Assignment assignment, ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
//		CrossReference crossReference = (CrossReference) assignment.getTerminal();
//		EReference ref = GrammarUtil.getReference(crossReference);
//		
//		IScope scope = getScopeProvider().getScope(model, ref);
//		Iterable<IEObjectDescription> candidates = scope.getAllElements();
//		
//		Event event = (Event) model.eContainer().eContainer();
//		
//	}
	
	@Override
    public void completeSensor_SensorSpecifier(EObject model, Assignment assignment, ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
		if (model != null && ((Sensor) model).getSensorName() != null) {
            switch (model.getSensorName()) {
                case "obstacle":
                    acceptor.accept(createCompletionProposal("front", context));
                    acceptor.accept(createCompletionProposal("back", context));
                    acceptor.accept(createCompletionProposal("left", context));
                    acceptor.accept(createCompletionProposal("right", context));
                    break;
                case "line":
                    acceptor.accept(createCompletionProposal("left", context));
                    acceptor.accept(createCompletionProposal("right", context));
                    break;
                case "button":
                    acceptor.accept(createCompletionProposal("left", context));
                    acceptor.accept(createCompletionProposal("right", context));
                    acceptor.accept(createCompletionProposal("up", context));
                    acceptor.accept(createCompletionProposal("down", context));
                    acceptor.accept(createCompletionProposal("center", context));
                    break;
                // Add other cases if needed
            }
        }
    }
}
