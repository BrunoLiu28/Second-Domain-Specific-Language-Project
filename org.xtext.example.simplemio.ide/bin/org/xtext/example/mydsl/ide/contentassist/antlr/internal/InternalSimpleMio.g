/*
 * generated by Xtext 2.34.0
 */
grammar InternalSimpleMio;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package org.xtext.example.mydsl.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.xtext.example.mydsl.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import org.xtext.example.mydsl.services.SimpleMioGrammarAccess;

}
@parser::members {
	private SimpleMioGrammarAccess grammarAccess;

	public void setGrammarAccess(SimpleMioGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleModel
entryRuleModel
:
{ before(grammarAccess.getModelRule()); }
	 ruleModel
{ after(grammarAccess.getModelRule()); } 
	 EOF 
;

// Rule Model
ruleModel 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getModelAccess().getGroup()); }
		(rule__Model__Group__0)
		{ after(grammarAccess.getModelAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleProgram
entryRuleProgram
:
{ before(grammarAccess.getProgramRule()); }
	 ruleProgram
{ after(grammarAccess.getProgramRule()); } 
	 EOF 
;

// Rule Program
ruleProgram 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		(
			{ before(grammarAccess.getProgramAccess().getEventsAssignment()); }
			(rule__Program__EventsAssignment)
			{ after(grammarAccess.getProgramAccess().getEventsAssignment()); }
		)
		(
			{ before(grammarAccess.getProgramAccess().getEventsAssignment()); }
			(rule__Program__EventsAssignment)*
			{ after(grammarAccess.getProgramAccess().getEventsAssignment()); }
		)
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleEvent
entryRuleEvent
:
{ before(grammarAccess.getEventRule()); }
	 ruleEvent
{ after(grammarAccess.getEventRule()); } 
	 EOF 
;

// Rule Event
ruleEvent 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getEventAccess().getGroup()); }
		(rule__Event__Group__0)
		{ after(grammarAccess.getEventAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAction
entryRuleAction
:
{ before(grammarAccess.getActionRule()); }
	 ruleAction
{ after(grammarAccess.getActionRule()); } 
	 EOF 
;

// Rule Action
ruleAction 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getActionAccess().getGroup()); }
		(rule__Action__Group__0)
		{ after(grammarAccess.getActionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleOr
entryRuleOr
:
{ before(grammarAccess.getOrRule()); }
	 ruleOr
{ after(grammarAccess.getOrRule()); } 
	 EOF 
;

// Rule Or
ruleOr 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getOrAccess().getGroup()); }
		(rule__Or__Group__0)
		{ after(grammarAccess.getOrAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAnd
entryRuleAnd
:
{ before(grammarAccess.getAndRule()); }
	 ruleAnd
{ after(grammarAccess.getAndRule()); } 
	 EOF 
;

// Rule And
ruleAnd 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAndAccess().getGroup()); }
		(rule__And__Group__0)
		{ after(grammarAccess.getAndAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleNot
entryRuleNot
:
{ before(grammarAccess.getNotRule()); }
	 ruleNot
{ after(grammarAccess.getNotRule()); } 
	 EOF 
;

// Rule Not
ruleNot 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getNotAccess().getAlternatives()); }
		(rule__Not__Alternatives)
		{ after(grammarAccess.getNotAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleParen
entryRuleParen
:
{ before(grammarAccess.getParenRule()); }
	 ruleParen
{ after(grammarAccess.getParenRule()); } 
	 EOF 
;

// Rule Paren
ruleParen 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getParenAccess().getGroup()); }
		(rule__Paren__Group__0)
		{ after(grammarAccess.getParenAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSensor
entryRuleSensor
:
{ before(grammarAccess.getSensorRule()); }
	 ruleSensor
{ after(grammarAccess.getSensorRule()); } 
	 EOF 
;

// Rule Sensor
ruleSensor 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSensorAccess().getGroup()); }
		(rule__Sensor__Group__0)
		{ after(grammarAccess.getSensorAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleEInt
entryRuleEInt
:
{ before(grammarAccess.getEIntRule()); }
	 ruleEInt
{ after(grammarAccess.getEIntRule()); } 
	 EOF 
;

// Rule EInt
ruleEInt 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getEIntAccess().getGroup()); }
		(rule__EInt__Group__0)
		{ after(grammarAccess.getEIntAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Action__ActionNameAlternatives_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getActionAccess().getActionNameMoveKeyword_1_0_0()); }
		'move'
		{ after(grammarAccess.getActionAccess().getActionNameMoveKeyword_1_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getActionAccess().getActionNameLedKeyword_1_0_1()); }
		'led'
		{ after(grammarAccess.getActionAccess().getActionNameLedKeyword_1_0_1()); }
	)
	|
	(
		{ before(grammarAccess.getActionAccess().getActionNameTurnKeyword_1_0_2()); }
		'turn'
		{ after(grammarAccess.getActionAccess().getActionNameTurnKeyword_1_0_2()); }
	)
	|
	(
		{ before(grammarAccess.getActionAccess().getActionNameStopKeyword_1_0_3()); }
		'stop'
		{ after(grammarAccess.getActionAccess().getActionNameStopKeyword_1_0_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Action__ActionSpecifierAlternatives_2_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getActionAccess().getActionSpecifierLeftKeyword_2_0_0()); }
		'left'
		{ after(grammarAccess.getActionAccess().getActionSpecifierLeftKeyword_2_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getActionAccess().getActionSpecifierRightKeyword_2_0_1()); }
		'right'
		{ after(grammarAccess.getActionAccess().getActionSpecifierRightKeyword_2_0_1()); }
	)
	|
	(
		{ before(grammarAccess.getActionAccess().getActionSpecifierForwardKeyword_2_0_2()); }
		'forward'
		{ after(grammarAccess.getActionAccess().getActionSpecifierForwardKeyword_2_0_2()); }
	)
	|
	(
		{ before(grammarAccess.getActionAccess().getActionSpecifierBackwardKeyword_2_0_3()); }
		'backward'
		{ after(grammarAccess.getActionAccess().getActionSpecifierBackwardKeyword_2_0_3()); }
	)
	|
	(
		{ before(grammarAccess.getActionAccess().getActionSpecifierRedKeyword_2_0_4()); }
		'red'
		{ after(grammarAccess.getActionAccess().getActionSpecifierRedKeyword_2_0_4()); }
	)
	|
	(
		{ before(grammarAccess.getActionAccess().getActionSpecifierGreenKeyword_2_0_5()); }
		'green'
		{ after(grammarAccess.getActionAccess().getActionSpecifierGreenKeyword_2_0_5()); }
	)
	|
	(
		{ before(grammarAccess.getActionAccess().getActionSpecifierBlueKeyword_2_0_6()); }
		'blue'
		{ after(grammarAccess.getActionAccess().getActionSpecifierBlueKeyword_2_0_6()); }
	)
	|
	(
		{ before(grammarAccess.getActionAccess().getActionSpecifierOffKeyword_2_0_7()); }
		'off'
		{ after(grammarAccess.getActionAccess().getActionSpecifierOffKeyword_2_0_7()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Not__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNotAccess().getGroup_0()); }
		(rule__Not__Group_0__0)
		{ after(grammarAccess.getNotAccess().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getNotAccess().getGroup_1()); }
		(rule__Not__Group_1__0)
		{ after(grammarAccess.getNotAccess().getGroup_1()); }
	)
	|
	(
		{ before(grammarAccess.getNotAccess().getSensorParserRuleCall_2()); }
		ruleSensor
		{ after(grammarAccess.getNotAccess().getSensorParserRuleCall_2()); }
	)
	|
	(
		{ before(grammarAccess.getNotAccess().getParenParserRuleCall_3()); }
		ruleParen
		{ after(grammarAccess.getNotAccess().getParenParserRuleCall_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Sensor__SensorNameAlternatives_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSensorAccess().getSensorNameObstacleKeyword_1_0_0()); }
		'obstacle'
		{ after(grammarAccess.getSensorAccess().getSensorNameObstacleKeyword_1_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getSensorAccess().getSensorNameSoundKeyword_1_0_1()); }
		'sound'
		{ after(grammarAccess.getSensorAccess().getSensorNameSoundKeyword_1_0_1()); }
	)
	|
	(
		{ before(grammarAccess.getSensorAccess().getSensorNameLineKeyword_1_0_2()); }
		'line'
		{ after(grammarAccess.getSensorAccess().getSensorNameLineKeyword_1_0_2()); }
	)
	|
	(
		{ before(grammarAccess.getSensorAccess().getSensorNameButtonKeyword_1_0_3()); }
		'button'
		{ after(grammarAccess.getSensorAccess().getSensorNameButtonKeyword_1_0_3()); }
	)
	|
	(
		{ before(grammarAccess.getSensorAccess().getSensorNameMotorKeyword_1_0_4()); }
		'motor'
		{ after(grammarAccess.getSensorAccess().getSensorNameMotorKeyword_1_0_4()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Sensor__SensorSpecifierAlternatives_2_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSensorAccess().getSensorSpecifierFrontKeyword_2_0_0()); }
		'front'
		{ after(grammarAccess.getSensorAccess().getSensorSpecifierFrontKeyword_2_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getSensorAccess().getSensorSpecifierBackKeyword_2_0_1()); }
		'back'
		{ after(grammarAccess.getSensorAccess().getSensorSpecifierBackKeyword_2_0_1()); }
	)
	|
	(
		{ before(grammarAccess.getSensorAccess().getSensorSpecifierLeftKeyword_2_0_2()); }
		'left'
		{ after(grammarAccess.getSensorAccess().getSensorSpecifierLeftKeyword_2_0_2()); }
	)
	|
	(
		{ before(grammarAccess.getSensorAccess().getSensorSpecifierRightKeyword_2_0_3()); }
		'right'
		{ after(grammarAccess.getSensorAccess().getSensorSpecifierRightKeyword_2_0_3()); }
	)
	|
	(
		{ before(grammarAccess.getSensorAccess().getSensorSpecifierUpKeyword_2_0_4()); }
		'up'
		{ after(grammarAccess.getSensorAccess().getSensorSpecifierUpKeyword_2_0_4()); }
	)
	|
	(
		{ before(grammarAccess.getSensorAccess().getSensorSpecifierDownKeyword_2_0_5()); }
		'down'
		{ after(grammarAccess.getSensorAccess().getSensorSpecifierDownKeyword_2_0_5()); }
	)
	|
	(
		{ before(grammarAccess.getSensorAccess().getSensorSpecifierCenterKeyword_2_0_6()); }
		'center'
		{ after(grammarAccess.getSensorAccess().getSensorSpecifierCenterKeyword_2_0_6()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Model__Group__0__Impl
	rule__Model__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getModelAccess().getModelAction_0()); }
	()
	{ after(grammarAccess.getModelAccess().getModelAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Model__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getModelAccess().getProgramAssignment_1()); }
	(rule__Model__ProgramAssignment_1)
	{ after(grammarAccess.getModelAccess().getProgramAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Event__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Event__Group__0__Impl
	rule__Event__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Event__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEventAccess().getEventAction_0()); }
	()
	{ after(grammarAccess.getEventAccess().getEventAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Event__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Event__Group__1__Impl
	rule__Event__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Event__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEventAccess().getConditionalsensorAssignment_1()); }
	(rule__Event__ConditionalsensorAssignment_1)
	{ after(grammarAccess.getEventAccess().getConditionalsensorAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Event__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Event__Group__2__Impl
	rule__Event__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Event__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEventAccess().getHyphenMinusGreaterThanSignKeyword_2()); }
	'->'
	{ after(grammarAccess.getEventAccess().getHyphenMinusGreaterThanSignKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Event__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Event__Group__3__Impl
	rule__Event__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Event__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEventAccess().getActionsAssignment_3()); }
	(rule__Event__ActionsAssignment_3)
	{ after(grammarAccess.getEventAccess().getActionsAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Event__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Event__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Event__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEventAccess().getGroup_4()); }
	(rule__Event__Group_4__0)*
	{ after(grammarAccess.getEventAccess().getGroup_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Event__Group_4__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Event__Group_4__0__Impl
	rule__Event__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Event__Group_4__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEventAccess().getCommaKeyword_4_0()); }
	','
	{ after(grammarAccess.getEventAccess().getCommaKeyword_4_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Event__Group_4__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Event__Group_4__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Event__Group_4__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEventAccess().getActionsAssignment_4_1()); }
	(rule__Event__ActionsAssignment_4_1)
	{ after(grammarAccess.getEventAccess().getActionsAssignment_4_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Action__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Action__Group__0__Impl
	rule__Action__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Action__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getActionAccess().getActionAction_0()); }
	()
	{ after(grammarAccess.getActionAccess().getActionAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Action__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Action__Group__1__Impl
	rule__Action__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Action__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getActionAccess().getActionNameAssignment_1()); }
	(rule__Action__ActionNameAssignment_1)
	{ after(grammarAccess.getActionAccess().getActionNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Action__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Action__Group__2__Impl
	rule__Action__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Action__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getActionAccess().getActionSpecifierAssignment_2()); }
	(rule__Action__ActionSpecifierAssignment_2)?
	{ after(grammarAccess.getActionAccess().getActionSpecifierAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Action__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Action__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Action__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getActionAccess().getGroup_3()); }
	(rule__Action__Group_3__0)?
	{ after(grammarAccess.getActionAccess().getGroup_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Action__Group_3__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Action__Group_3__0__Impl
	rule__Action__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Action__Group_3__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getActionAccess().getCommercialAtKeyword_3_0()); }
	'@'
	{ after(grammarAccess.getActionAccess().getCommercialAtKeyword_3_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Action__Group_3__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Action__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Action__Group_3__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getActionAccess().getStrengthAssignment_3_1()); }
	(rule__Action__StrengthAssignment_3_1)
	{ after(grammarAccess.getActionAccess().getStrengthAssignment_3_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Or__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Or__Group__0__Impl
	rule__Or__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Or__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOrAccess().getAndParserRuleCall_0()); }
	ruleAnd
	{ after(grammarAccess.getOrAccess().getAndParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Or__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Or__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Or__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOrAccess().getGroup_1()); }
	(rule__Or__Group_1__0)*
	{ after(grammarAccess.getOrAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Or__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Or__Group_1__0__Impl
	rule__Or__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Or__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOrAccess().getOrLeftAction_1_0()); }
	()
	{ after(grammarAccess.getOrAccess().getOrLeftAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Or__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Or__Group_1__1__Impl
	rule__Or__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Or__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOrAccess().getOrKeyword_1_1()); }
	'or'
	{ after(grammarAccess.getOrAccess().getOrKeyword_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Or__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Or__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Or__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOrAccess().getRightAssignment_1_2()); }
	(rule__Or__RightAssignment_1_2)
	{ after(grammarAccess.getOrAccess().getRightAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__And__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__And__Group__0__Impl
	rule__And__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__And__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAndAccess().getNotParserRuleCall_0()); }
	ruleNot
	{ after(grammarAccess.getAndAccess().getNotParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__And__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__And__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__And__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAndAccess().getGroup_1()); }
	(rule__And__Group_1__0)*
	{ after(grammarAccess.getAndAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__And__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__And__Group_1__0__Impl
	rule__And__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__And__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAndAccess().getAndLeftAction_1_0()); }
	()
	{ after(grammarAccess.getAndAccess().getAndLeftAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__And__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__And__Group_1__1__Impl
	rule__And__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__And__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAndAccess().getAndKeyword_1_1()); }
	'and'
	{ after(grammarAccess.getAndAccess().getAndKeyword_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__And__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__And__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__And__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAndAccess().getRightAssignment_1_2()); }
	(rule__And__RightAssignment_1_2)
	{ after(grammarAccess.getAndAccess().getRightAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Not__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Not__Group_0__0__Impl
	rule__Not__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Not__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNotAccess().getNotAction_0_0()); }
	()
	{ after(grammarAccess.getNotAccess().getNotAction_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Not__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Not__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Not__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNotAccess().getGroup_0_1()); }
	(rule__Not__Group_0_1__0)
	{ after(grammarAccess.getNotAccess().getGroup_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Not__Group_0_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Not__Group_0_1__0__Impl
	rule__Not__Group_0_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Not__Group_0_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNotAccess().getNotKeyword_0_1_0()); }
	'not'
	{ after(grammarAccess.getNotAccess().getNotKeyword_0_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Not__Group_0_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Not__Group_0_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Not__Group_0_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNotAccess().getConditionalsensorAssignment_0_1_1()); }
	(rule__Not__ConditionalsensorAssignment_0_1_1)
	{ after(grammarAccess.getNotAccess().getConditionalsensorAssignment_0_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Not__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Not__Group_1__0__Impl
	rule__Not__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Not__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNotAccess().getNotAction_1_0()); }
	()
	{ after(grammarAccess.getNotAccess().getNotAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Not__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Not__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Not__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNotAccess().getGroup_1_1()); }
	(rule__Not__Group_1_1__0)
	{ after(grammarAccess.getNotAccess().getGroup_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Not__Group_1_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Not__Group_1_1__0__Impl
	rule__Not__Group_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Not__Group_1_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNotAccess().getNotKeyword_1_1_0()); }
	'not'
	{ after(grammarAccess.getNotAccess().getNotKeyword_1_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Not__Group_1_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Not__Group_1_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Not__Group_1_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNotAccess().getConditionalsensorAssignment_1_1_1()); }
	(rule__Not__ConditionalsensorAssignment_1_1_1)
	{ after(grammarAccess.getNotAccess().getConditionalsensorAssignment_1_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Paren__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Paren__Group__0__Impl
	rule__Paren__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Paren__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParenAccess().getLeftParenthesisKeyword_0()); }
	'('
	{ after(grammarAccess.getParenAccess().getLeftParenthesisKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Paren__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Paren__Group__1__Impl
	rule__Paren__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Paren__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParenAccess().getOrParserRuleCall_1()); }
	ruleOr
	{ after(grammarAccess.getParenAccess().getOrParserRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Paren__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Paren__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Paren__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParenAccess().getRightParenthesisKeyword_2()); }
	')'
	{ after(grammarAccess.getParenAccess().getRightParenthesisKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Sensor__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Sensor__Group__0__Impl
	rule__Sensor__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Sensor__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSensorAccess().getSensorAction_0()); }
	()
	{ after(grammarAccess.getSensorAccess().getSensorAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Sensor__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Sensor__Group__1__Impl
	rule__Sensor__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Sensor__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSensorAccess().getSensorNameAssignment_1()); }
	(rule__Sensor__SensorNameAssignment_1)
	{ after(grammarAccess.getSensorAccess().getSensorNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Sensor__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Sensor__Group__2__Impl
	rule__Sensor__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Sensor__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSensorAccess().getSensorSpecifierAssignment_2()); }
	(rule__Sensor__SensorSpecifierAssignment_2)?
	{ after(grammarAccess.getSensorAccess().getSensorSpecifierAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Sensor__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Sensor__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Sensor__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSensorAccess().getGroup_3()); }
	(rule__Sensor__Group_3__0)?
	{ after(grammarAccess.getSensorAccess().getGroup_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Sensor__Group_3__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Sensor__Group_3__0__Impl
	rule__Sensor__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Sensor__Group_3__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSensorAccess().getCommercialAtKeyword_3_0()); }
	'@'
	{ after(grammarAccess.getSensorAccess().getCommercialAtKeyword_3_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Sensor__Group_3__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Sensor__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Sensor__Group_3__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSensorAccess().getStrengthAssignment_3_1()); }
	(rule__Sensor__StrengthAssignment_3_1)
	{ after(grammarAccess.getSensorAccess().getStrengthAssignment_3_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__EInt__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EInt__Group__0__Impl
	rule__EInt__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EInt__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEIntAccess().getHyphenMinusKeyword_0()); }
	('-')?
	{ after(grammarAccess.getEIntAccess().getHyphenMinusKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__EInt__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EInt__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EInt__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEIntAccess().getINTTerminalRuleCall_1()); }
	RULE_INT
	{ after(grammarAccess.getEIntAccess().getINTTerminalRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Model__ProgramAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModelAccess().getProgramProgramParserRuleCall_1_0()); }
		ruleProgram
		{ after(grammarAccess.getModelAccess().getProgramProgramParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__EventsAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getProgramAccess().getEventsEventParserRuleCall_0()); }
		ruleEvent
		{ after(grammarAccess.getProgramAccess().getEventsEventParserRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Event__ConditionalsensorAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEventAccess().getConditionalsensorOrParserRuleCall_1_0()); }
		ruleOr
		{ after(grammarAccess.getEventAccess().getConditionalsensorOrParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Event__ActionsAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEventAccess().getActionsActionParserRuleCall_3_0()); }
		ruleAction
		{ after(grammarAccess.getEventAccess().getActionsActionParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Event__ActionsAssignment_4_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEventAccess().getActionsActionParserRuleCall_4_1_0()); }
		ruleAction
		{ after(grammarAccess.getEventAccess().getActionsActionParserRuleCall_4_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Action__ActionNameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getActionAccess().getActionNameAlternatives_1_0()); }
		(rule__Action__ActionNameAlternatives_1_0)
		{ after(grammarAccess.getActionAccess().getActionNameAlternatives_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Action__ActionSpecifierAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getActionAccess().getActionSpecifierAlternatives_2_0()); }
		(rule__Action__ActionSpecifierAlternatives_2_0)
		{ after(grammarAccess.getActionAccess().getActionSpecifierAlternatives_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Action__StrengthAssignment_3_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getActionAccess().getStrengthEIntParserRuleCall_3_1_0()); }
		ruleEInt
		{ after(grammarAccess.getActionAccess().getStrengthEIntParserRuleCall_3_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Or__RightAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOrAccess().getRightAndParserRuleCall_1_2_0()); }
		ruleAnd
		{ after(grammarAccess.getOrAccess().getRightAndParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__And__RightAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAndAccess().getRightNotParserRuleCall_1_2_0()); }
		ruleNot
		{ after(grammarAccess.getAndAccess().getRightNotParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Not__ConditionalsensorAssignment_0_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNotAccess().getConditionalsensorParenParserRuleCall_0_1_1_0()); }
		ruleParen
		{ after(grammarAccess.getNotAccess().getConditionalsensorParenParserRuleCall_0_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Not__ConditionalsensorAssignment_1_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNotAccess().getConditionalsensorSensorParserRuleCall_1_1_1_0()); }
		ruleSensor
		{ after(grammarAccess.getNotAccess().getConditionalsensorSensorParserRuleCall_1_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Sensor__SensorNameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSensorAccess().getSensorNameAlternatives_1_0()); }
		(rule__Sensor__SensorNameAlternatives_1_0)
		{ after(grammarAccess.getSensorAccess().getSensorNameAlternatives_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Sensor__SensorSpecifierAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSensorAccess().getSensorSpecifierAlternatives_2_0()); }
		(rule__Sensor__SensorSpecifierAlternatives_2_0)
		{ after(grammarAccess.getSensorAccess().getSensorSpecifierAlternatives_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Sensor__StrengthAssignment_3_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSensorAccess().getStrengthEIntParserRuleCall_3_1_0()); }
		ruleEInt
		{ after(grammarAccess.getSensorAccess().getStrengthEIntParserRuleCall_3_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_SL_COMMENT : '#' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
