/*
 * generated by Xtext 2.34.0
 */
package org.xtext.example.mydsl.serializer;

import com.google.inject.Inject;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.GroupAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;
import org.xtext.example.mydsl.services.SimpleMioGrammarAccess;

@SuppressWarnings("all")
public class SimpleMioSyntacticSequencer extends AbstractSyntacticSequencer {

	protected SimpleMioGrammarAccess grammarAccess;
	protected AbstractElementAlias match_Program___NumberSignKeyword_1_1_0_EStringParserRuleCall_1_1_1_a__a;
	protected AbstractElementAlias match_Program___NumberSignKeyword_1_1_0_EStringParserRuleCall_1_1_1_a__p;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (SimpleMioGrammarAccess) access;
		match_Program___NumberSignKeyword_1_1_0_EStringParserRuleCall_1_1_1_a__a = new GroupAlias(true, true, new TokenAlias(false, false, grammarAccess.getProgramAccess().getNumberSignKeyword_1_1_0()), new TokenAlias(true, true, grammarAccess.getProgramAccess().getEStringParserRuleCall_1_1_1()));
		match_Program___NumberSignKeyword_1_1_0_EStringParserRuleCall_1_1_1_a__p = new GroupAlias(true, false, new TokenAlias(false, false, grammarAccess.getProgramAccess().getNumberSignKeyword_1_1_0()), new TokenAlias(true, true, grammarAccess.getProgramAccess().getEStringParserRuleCall_1_1_1()));
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (ruleCall.getRule() == grammarAccess.getEStringRule())
			return getEStringToken(semanticObject, ruleCall, node);
		return "";
	}
	
	/**
	 * EString returns ecore::EString:
	 * 	STRING | ID;
	 */
	protected String getEStringToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "\"\"";
	}
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if (match_Program___NumberSignKeyword_1_1_0_EStringParserRuleCall_1_1_1_a__a.equals(syntax))
				emit_Program___NumberSignKeyword_1_1_0_EStringParserRuleCall_1_1_1_a__a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Program___NumberSignKeyword_1_1_0_EStringParserRuleCall_1_1_1_a__p.equals(syntax))
				emit_Program___NumberSignKeyword_1_1_0_EStringParserRuleCall_1_1_1_a__p(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     ('#' EString*)*
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) events+=Event
	 *     events+=Event (ambiguity) (rule end)
	 *     events+=Event (ambiguity) events+=Event
	 
	 * </pre>
	 */
	protected void emit_Program___NumberSignKeyword_1_1_0_EStringParserRuleCall_1_1_1_a__a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     ('#' EString*)+
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) (rule start)
	 
	 * </pre>
	 */
	protected void emit_Program___NumberSignKeyword_1_1_0_EStringParserRuleCall_1_1_1_a__p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
