/*
 * generated by Xtext 2.34.0
 */
package org.xtext.example.mydsl.validation;

import org.eclipse.xtext.validation.Check;

import simplemioModel.Action;
import simplemioModel.Event;
import simplemioModel.Sensor;
import simplemioModel.SimplemioModelPackage;

/**
 * This class contains custom validation rules. 
 *
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
public class SimpleMioValidator extends AbstractSimpleMioValidator {
	
//	public static final String INVALID_NAME = "invalidName";
//
//	@Check
//	public void checkGreetingStartsWithCapital(Greeting greeting) {
//		if (!Character.isUpperCase(greeting.getName().charAt(0))) {
//			warning("Name should start with a capital",
//					SimpleMioPackage.Literals.GREETING__NAME,
//					INVALID_NAME);
//		}
//	}
	
	public static final String INVALID_MOVE_ACTION_SPECIFIER = "invalidMoveActionSpecifier";
	public static final String INVALID_LED_ACTION_SPECIFIER = "invalidLedActionSpecifier";
	public static final String INVALID_TURN_ACTION_SPECIFIER = "invalidTurnActionSpecifier";
	public static final String INVALID_STOP_ACTION_SPECIFIER = "invalidStopActionSpecifier";
	@Check
	public void checkActionSpecifier(Action action) {
		switch (action.getActionName()) {
			case "move": {
				if (!(action.getActionSpecifier().equals("forward") ||  action.getActionSpecifier().equals("backward"))) {
					error("Invalid specifier '" + action.getActionSpecifier() +  "' used for 'move'",
							action,
							SimplemioModelPackage.eINSTANCE.getAction_ActionSpecifier(), 
							INVALID_MOVE_ACTION_SPECIFIER);
				}
				break;
			}
			
			case "led": {
				if (!("redbluegreenoff".contains(action.getActionSpecifier()))) {
					error("Invalid specifier '" + action.getActionSpecifier() +  "' used for 'led'",
							action,
							SimplemioModelPackage.eINSTANCE.getAction_ActionSpecifier(),
							INVALID_LED_ACTION_SPECIFIER);
				}
				break;
			}
			
			case "turn": {
				if (!(action.getActionSpecifier().equals("left") ||  action.getActionSpecifier().equals("right"))) {
					error("Invalid specifier '" + action.getActionSpecifier() +  "' used for 'turn'",
							action,
							SimplemioModelPackage.eINSTANCE.getAction_ActionSpecifier(),
							INVALID_TURN_ACTION_SPECIFIER);
				}
				break;
			}
			case "stop": {
				if (action.getActionSpecifier() != null) {
					error("Invalid specifier '" + action.getActionSpecifier() + "' used for 'stop'. Stop does not have any specifier",
							action,
							SimplemioModelPackage.eINSTANCE.getAction_ActionSpecifier(),
							INVALID_STOP_ACTION_SPECIFIER);
				}
				break;
			}
		}
	}
	
	public static final String INVALID_OBSTACLE_SENSOR_SPECIFIER = "invalidObstacleSensorSpecifier";
	public static final String INVALID_LINE_SENSOR_SPECIFIER = "invalidLineSensorSpecifier";
	public static final String INVALID_SOUND_SENSOR_SPECIFIER = "invalidSoundSensorSpecifier";
	public static final String INVALID_BUTTON_SENSOR_SPECIFIER = "invalidButtonSensorSpecifier";
	public static final String INVALID_MOTOR_SENSOR_SPECIFIER = "invalidMotorSensorSpecifier";
	
	@Check
	public void checkSensorSpecifier(Sensor sensor) {
		switch (sensor.getSensorName()) {
			case "obstacle": {
				if (!"frontbackleftright".contains(sensor.getSensorSpecifier())) {
					error("Invalid specifier '" + sensor.getSensorSpecifier() + "' used for 'obstacle",
							sensor,
							SimplemioModelPackage.eINSTANCE.getSensor_SensorSpecifier(),
							INVALID_OBSTACLE_SENSOR_SPECIFIER);
				}
				break;
			}
			case "line": {
				if (!"leftright".contains(sensor.getSensorSpecifier())) {
					error("Invalid specifier '" + sensor.getSensorSpecifier() + "' used for 'line",
							sensor,
							SimplemioModelPackage.eINSTANCE.getSensor_SensorSpecifier(),
							INVALID_LINE_SENSOR_SPECIFIER);
				}
				break;
			}
			case "sound": {
				if (sensor.getSensorSpecifier() != null) {
					error("Invalid specifier '" + sensor.getSensorSpecifier() + "' used for 'sound'. Sound does not have any specifier",
							sensor,
							SimplemioModelPackage.eINSTANCE.getSensor_SensorSpecifier(),
							INVALID_SOUND_SENSOR_SPECIFIER);
				}
				break;
			}
			case "button": {
				if (!"leftrightupdowncenter".contains(sensor.getSensorSpecifier())) {
					error("Invalid specifier '" + sensor.getSensorSpecifier() + "' used for 'line",
							sensor,
							SimplemioModelPackage.eINSTANCE.getSensor_SensorSpecifier(),
							INVALID_BUTTON_SENSOR_SPECIFIER);
				}
				break;
			}
			case "motor": {
				if (sensor.getSensorSpecifier() != null) {
					error("Invalid specifier '" + sensor.getSensorSpecifier() + "' used for 'motor'. Motor does not have any specifier",
							sensor,
							SimplemioModelPackage.eINSTANCE.getSensor_SensorSpecifier(),
							INVALID_MOTOR_SENSOR_SPECIFIER);
				}
				break;
			}
		}
	}
	
	public static final String MISSING_SPECIFIER = "missingSpecifier";
	
	@Check
	public void check_missing_specifier(Sensor sensor) {
		if (!"soundmotor".contains(sensor.getSensorName()) && sensor.getSensorSpecifier() == null) {
			error("Sensor '" + sensor.getSensorName() + "' requires a specifier",
					sensor,
					SimplemioModelPackage.eINSTANCE.getSensor_SensorName(),
					MISSING_SPECIFIER);
		}
	}
	@Check
	public void check_missing_specifier(Action action) {
		if (!"stop".contains(action.getActionName()) && action.getActionSpecifier() == null) {
			error("Action '" + action.getActionName() + "' requires a specifier",
					action,
					SimplemioModelPackage.eINSTANCE.getAction_ActionName(),
					MISSING_SPECIFIER);
		}
	}
	
	public static final String INVALID_INTENSITY = "invalidIntensity";
	public static final String INVALID_VALUE_INTENSITY = "invalidValueIntensity";
	
	@Check
	public void check_intensity(Sensor sensor) {
		if ("motorbutton".contains(sensor.getSensorName()) && sensor.getStrength() != null) {
			error("'" + sensor.getSensorName() + "' does not support sensor intensity",
					sensor,
					SimplemioModelPackage.eINSTANCE.getSensor_Strength(),
					INVALID_INTENSITY);
		} else if (sensor.getStrength() < 0 || sensor.getStrength() > 10) {
			error("Invalid value " + sensor.getStrength() + " for sensor intensity",
					sensor,
					SimplemioModelPackage.eINSTANCE.getSensor_Strength(),
					INVALID_VALUE_INTENSITY);			
		}
	}
	
	
	@Check
	public void check_intensity(Action action) {
		if (action.getActionName().equals("stop") && action.getStrength() != null) {
			error("'Stop' does not support action intensity",
					action,
					SimplemioModelPackage.eINSTANCE.getAction_Strength(),
					INVALID_INTENSITY);
		} else if (action.getActionName().equals("led") && action.getActionSpecifier().equals("off") && action.getStrength() != null) {
			error("'Led off' does not support action intensity",
					action,
					SimplemioModelPackage.eINSTANCE.getAction_Strength(),
					INVALID_INTENSITY);
		} else 
		if (action.getStrength() < 0 || action.getStrength() > 10) {
			error("Invalid value " + action.getStrength() + " for action intensity",
					action,
					SimplemioModelPackage.eINSTANCE.getAction_Strength(),
					INVALID_VALUE_INTENSITY);
					
		}
	}
	
	public static final String SAME_ACTUATOR_ACTION = "sameActuatorAction";
	
	@Check
	public void check_action_from_same_actuator(Event event) {
		boolean hasLed = false;
		boolean hasMoveOrTurn = false;
		
		for (Action a : event.getActions()) {
			if (a.getActionName().equals("led")) {
				if (hasLed) {
					error("Cannot have more than one led action",
							a,
							SimplemioModelPackage.eINSTANCE.getAction_ActionName(),
							SAME_ACTUATOR_ACTION);
				} else {
					hasLed = true;
				}
			} else if ("turnmovestop".contains(a.getActionName())) {
				if (hasMoveOrTurn) {
					error("Cannot have more than one turn or move action",
							a,
							SimplemioModelPackage.eINSTANCE.getAction_ActionName(),
							SAME_ACTUATOR_ACTION);
				} else {
					hasMoveOrTurn = true;
				}
			}
		}
			
	}
	
	
}