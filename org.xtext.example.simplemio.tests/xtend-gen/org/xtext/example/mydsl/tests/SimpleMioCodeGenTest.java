package org.xtext.example.mydsl.tests;

import com.google.inject.Inject;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.testing.InjectWith;
import org.eclipse.xtext.testing.extensions.InjectionExtension;
import org.eclipse.xtext.xbase.lib.Exceptions;
import org.eclipse.xtext.xbase.lib.Extension;
import org.eclipse.xtext.xbase.lib.util.ReflectExtensions;
import org.eclipse.xtext.xbase.testing.CompilationTestHelper;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;

@ExtendWith(InjectionExtension.class)
@InjectWith(SimpleMioInjectorProvider.class)
@SuppressWarnings("all")
public class SimpleMioCodeGenTest {
  @Inject
  @Extension
  private CompilationTestHelper _compilationTestHelper;

  @Inject
  @Extension
  private ReflectExtensions _reflectExtensions;

  @Test
  public void testSimpleProgram() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("not obstacle front -> move forward");
      _builder.newLine();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("var obstacle = 2000");
      _builder_1.newLine();
      _builder_1.append("var line = 400");
      _builder_1.newLine();
      _builder_1.append("var mic = 150");
      _builder_1.newLine();
      _builder_1.append("var motor = 250");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("mic.threshold = 250");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("onevent prox");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("if 0 != 0 then");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("elseif");
      _builder_1.newLine();
      _builder_1.append("not (prox.horizontal[1] > obstacle  or prox.horizontal[2] > obstacle  or prox.horizontal[3] > obstacle ");
      _builder_1.newLine();
      _builder_1.append(")");
      _builder_1.newLine();
      _builder_1.append(" ");
      _builder_1.append("then\t");
      _builder_1.newLine();
      _builder_1.append("motor.left.target = motor ");
      _builder_1.newLine();
      _builder_1.append("motor.right.target = motor ");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("end");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("onevent motor");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("if 0 != 0 then");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("end");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("onevent buttons");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("if 0 != 0 then");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("end");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("onevent mic");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("if 0 != 0 then");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("end");
      _builder_1.newLine();
      this._compilationTestHelper.assertCompilesTo(_builder, _builder_1);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }

  @Test
  public void testObstacleMove() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("not obstacle front -> move forward");
      _builder.newLine();
      _builder.append("obstacle left -> led red @9, turn right");
      _builder.newLine();
      _builder.append("obstacle right -> led green @3, turn left");
      _builder.newLine();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("var obstacle = 2000");
      _builder_1.newLine();
      _builder_1.append("var line = 400");
      _builder_1.newLine();
      _builder_1.append("var mic = 150");
      _builder_1.newLine();
      _builder_1.append("var motor = 250");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("mic.threshold = 250");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("onevent prox");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("if 0 != 0 then");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("elseif");
      _builder_1.newLine();
      _builder_1.append("not (prox.horizontal[1] > obstacle  or prox.horizontal[2] > obstacle  or prox.horizontal[3] > obstacle ");
      _builder_1.newLine();
      _builder_1.append(")");
      _builder_1.newLine();
      _builder_1.append(" ");
      _builder_1.append("then\t");
      _builder_1.newLine();
      _builder_1.append("motor.left.target = motor ");
      _builder_1.newLine();
      _builder_1.append("motor.right.target = motor ");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("elseif");
      _builder_1.newLine();
      _builder_1.append("prox.horizontal[0] > obstacle  or prox.horizontal[1] > obstacle ");
      _builder_1.newLine();
      _builder_1.append(" ");
      _builder_1.append("then\t");
      _builder_1.newLine();
      _builder_1.append("call leds.top(127 * 9 / 5");
      _builder_1.newLine();
      _builder_1.append(", 0 ,0)");
      _builder_1.newLine();
      _builder_1.append("motor.left.target = motor ");
      _builder_1.newLine();
      _builder_1.append("motor.right.target = -motor ");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("elseif");
      _builder_1.newLine();
      _builder_1.append("prox.horizontal[3] > obstacle  or prox.horizontal[4] > obstacle ");
      _builder_1.newLine();
      _builder_1.append(" ");
      _builder_1.append("then\t");
      _builder_1.newLine();
      _builder_1.append("call leds.top(0, 127 * 3 / 5");
      _builder_1.newLine();
      _builder_1.append(", 0)");
      _builder_1.newLine();
      _builder_1.append("motor.left.target = -motor ");
      _builder_1.newLine();
      _builder_1.append("motor.right.target = motor ");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("end");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("onevent motor");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("if 0 != 0 then");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("end");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("onevent buttons");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("if 0 != 0 then");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("end");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("onevent mic");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("if 0 != 0 then");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("end");
      _builder_1.newLine();
      this._compilationTestHelper.assertCompilesTo(_builder, _builder_1);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }

  @Test
  public void testSoundTurn() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("not obstacle front -> move forward");
      _builder.newLine();
      _builder.append("button center -> stop");
      _builder.newLine();
      _builder.append("sound -> turn left");
      _builder.newLine();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("var obstacle = 2000");
      _builder_1.newLine();
      _builder_1.append("var line = 400");
      _builder_1.newLine();
      _builder_1.append("var mic = 150");
      _builder_1.newLine();
      _builder_1.append("var motor = 250");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("mic.threshold = 250");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("onevent prox");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("if 0 != 0 then");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("elseif");
      _builder_1.newLine();
      _builder_1.append("not (prox.horizontal[1] > obstacle  or prox.horizontal[2] > obstacle  or prox.horizontal[3] > obstacle ");
      _builder_1.newLine();
      _builder_1.append(")");
      _builder_1.newLine();
      _builder_1.append(" ");
      _builder_1.append("then\t");
      _builder_1.newLine();
      _builder_1.append("motor.left.target = motor ");
      _builder_1.newLine();
      _builder_1.append("motor.right.target = motor ");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("end");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("onevent motor");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("if 0 != 0 then");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("end");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("onevent buttons");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("if 0 != 0 then");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("elseif");
      _builder_1.newLine();
      _builder_1.append("button.center > 0");
      _builder_1.newLine();
      _builder_1.append(" ");
      _builder_1.append("then\t");
      _builder_1.newLine();
      _builder_1.append("motor.left.target = 0");
      _builder_1.newLine();
      _builder_1.append("motor.right.target = 0\t");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("end");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("onevent mic");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("if 0 != 0 then");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("elseif");
      _builder_1.newLine();
      _builder_1.append("mic.intensity > mic ");
      _builder_1.newLine();
      _builder_1.append(" ");
      _builder_1.append("then\t");
      _builder_1.newLine();
      _builder_1.append("motor.left.target = -motor ");
      _builder_1.newLine();
      _builder_1.append("motor.right.target = motor ");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("end");
      _builder_1.newLine();
      this._compilationTestHelper.assertCompilesTo(_builder, _builder_1);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }

  @Test
  public void testMotor() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("button center and not motor -> move forward");
      _builder.newLine();
      _builder.append("button center and motor -> stop");
      _builder.newLine();
      _builder.append("motor -> move forward");
      _builder.newLine();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("var obstacle = 2000");
      _builder_1.newLine();
      _builder_1.append("var line = 400");
      _builder_1.newLine();
      _builder_1.append("var mic = 150");
      _builder_1.newLine();
      _builder_1.append("var motor = 250");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("mic.threshold = 250");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("onevent prox");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("if 0 != 0 then");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("end");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("onevent motor");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("if 0 != 0 then");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("elseif");
      _builder_1.newLine();
      _builder_1.append("(button.center > 0");
      _builder_1.newLine();
      _builder_1.append(") and (not ((motor.left.speed > 0 or motor.right.speed > 0)");
      _builder_1.newLine();
      _builder_1.append(")");
      _builder_1.newLine();
      _builder_1.append(")");
      _builder_1.newLine();
      _builder_1.append(" ");
      _builder_1.append("then\t");
      _builder_1.newLine();
      _builder_1.append("motor.left.target = motor ");
      _builder_1.newLine();
      _builder_1.append("motor.right.target = motor ");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("elseif");
      _builder_1.newLine();
      _builder_1.append("(button.center > 0");
      _builder_1.newLine();
      _builder_1.append(") and ((motor.left.speed > 0 or motor.right.speed > 0)");
      _builder_1.newLine();
      _builder_1.append(")");
      _builder_1.newLine();
      _builder_1.append(" ");
      _builder_1.append("then\t");
      _builder_1.newLine();
      _builder_1.append("motor.left.target = 0");
      _builder_1.newLine();
      _builder_1.append("motor.right.target = 0\t");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("elseif");
      _builder_1.newLine();
      _builder_1.append("(motor.left.speed > 0 or motor.right.speed > 0)");
      _builder_1.newLine();
      _builder_1.append(" ");
      _builder_1.append("then\t");
      _builder_1.newLine();
      _builder_1.append("motor.left.target = motor ");
      _builder_1.newLine();
      _builder_1.append("motor.right.target = motor ");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("end");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("onevent buttons");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("if 0 != 0 then");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("elseif");
      _builder_1.newLine();
      _builder_1.append("(button.center > 0");
      _builder_1.newLine();
      _builder_1.append(") and (not ((motor.left.speed > 0 or motor.right.speed > 0)");
      _builder_1.newLine();
      _builder_1.append(")");
      _builder_1.newLine();
      _builder_1.append(")");
      _builder_1.newLine();
      _builder_1.append(" ");
      _builder_1.append("then\t");
      _builder_1.newLine();
      _builder_1.append("motor.left.target = motor ");
      _builder_1.newLine();
      _builder_1.append("motor.right.target = motor ");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("elseif");
      _builder_1.newLine();
      _builder_1.append("(button.center > 0");
      _builder_1.newLine();
      _builder_1.append(") and ((motor.left.speed > 0 or motor.right.speed > 0)");
      _builder_1.newLine();
      _builder_1.append(")");
      _builder_1.newLine();
      _builder_1.append(" ");
      _builder_1.append("then\t");
      _builder_1.newLine();
      _builder_1.append("motor.left.target = 0");
      _builder_1.newLine();
      _builder_1.append("motor.right.target = 0\t");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("end");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("onevent mic");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("if 0 != 0 then");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("end");
      _builder_1.newLine();
      this._compilationTestHelper.assertCompilesTo(_builder, _builder_1);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }

  @Test
  public void testButtonsLed() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("sound -> led blue");
      _builder.newLine();
      _builder.append("button up -> move forward");
      _builder.newLine();
      _builder.append("button down -> move backward");
      _builder.newLine();
      _builder.append("button center -> stop");
      _builder.newLine();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("var obstacle = 2000");
      _builder_1.newLine();
      _builder_1.append("var line = 400");
      _builder_1.newLine();
      _builder_1.append("var mic = 150");
      _builder_1.newLine();
      _builder_1.append("var motor = 250");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("mic.threshold = 250");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("onevent prox");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("if 0 != 0 then");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("end");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("onevent motor");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("if 0 != 0 then");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("end");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("onevent buttons");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("if 0 != 0 then");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("elseif");
      _builder_1.newLine();
      _builder_1.append("button.forward > 0");
      _builder_1.newLine();
      _builder_1.append(" ");
      _builder_1.append("then\t");
      _builder_1.newLine();
      _builder_1.append("motor.left.target = motor ");
      _builder_1.newLine();
      _builder_1.append("motor.right.target = motor ");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("elseif");
      _builder_1.newLine();
      _builder_1.append("button.backward > 0");
      _builder_1.newLine();
      _builder_1.append(" ");
      _builder_1.append("then\t");
      _builder_1.newLine();
      _builder_1.append("motor.left.target = -motor ");
      _builder_1.newLine();
      _builder_1.append("motor.right.target = -motor ");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("elseif");
      _builder_1.newLine();
      _builder_1.append("button.center > 0");
      _builder_1.newLine();
      _builder_1.append(" ");
      _builder_1.append("then\t");
      _builder_1.newLine();
      _builder_1.append("motor.left.target = 0");
      _builder_1.newLine();
      _builder_1.append("motor.right.target = 0\t");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("end");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("onevent mic");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("if 0 != 0 then");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("elseif");
      _builder_1.newLine();
      _builder_1.append("mic.intensity > mic ");
      _builder_1.newLine();
      _builder_1.append(" ");
      _builder_1.append("then\t");
      _builder_1.newLine();
      _builder_1.append("call leds.top(0, 0, 127 )");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("end");
      _builder_1.newLine();
      this._compilationTestHelper.assertCompilesTo(_builder, _builder_1);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
}
