/*
 * generated by Xtext 2.34.0
 */
package org.xtext.example.mydsl.ui.quickfix;

import org.eclipse.jface.text.BadLocationException;
import org.eclipse.xtext.ui.editor.model.IXtextDocument;
import org.eclipse.xtext.ui.editor.quickfix.DefaultQuickfixProvider;
import org.eclipse.xtext.ui.editor.quickfix.Fix;
import org.eclipse.xtext.ui.editor.quickfix.IssueResolutionAcceptor;
import org.eclipse.xtext.validation.Issue;
import org.xtext.example.mydsl.validation.SimpleMioValidator;

/**
 * Custom quickfixes.
 *
 * See https://www.eclipse.org/Xtext/documentation/310_eclipse_support.html#quick-fixes
 */
public class SimpleMioQuickfixProvider extends DefaultQuickfixProvider {

//	@Fix(SimpleMioValidator.INVALID_NAME)
//	public void capitalizeName(final Issue issue, IssueResolutionAcceptor acceptor) {
//		acceptor.accept(issue, "Capitalize name", "Capitalize the name.", "upcase.png", new IModification() {
//			public void apply(IModificationContext context) throws BadLocationException {
//				IXtextDocument xtextDocument = context.getXtextDocument();
//				String firstLetter = xtextDocument.get(issue.getOffset(), 1);
//				xtextDocument.replace(issue.getOffset(), 1, firstLetter.toUpperCase());
//			}
//		});
//	}

	@Fix(SimpleMioValidator.INVALID_OBSTACLE_SENSOR_SPECIFIER)
    public void fixInvalidObstacleSensorSpecifier(final Issue issue, IssueResolutionAcceptor acceptor) {
        acceptor.accept(issue, "Set to 'front'", "Set to 'front'", null, context -> {
            updateValue(context.getXtextDocument(), issue, "front");
        });
        acceptor.accept(issue, "Set to 'left'", "Set to 'left'", null, context -> {
            updateValue(context.getXtextDocument(), issue, "left");
        });
        acceptor.accept(issue, "Set to 'right'", "Set to 'right'", null, context -> {
            updateValue(context.getXtextDocument(), issue, "right");
        });
        acceptor.accept(issue, "Set to 'back'", "Set to 'back'", null, context -> {
            updateValue(context.getXtextDocument(), issue, "back");
        });

    }
	
	@Fix(SimpleMioValidator.INVALID_LINE_SENSOR_SPECIFIER)
    public void fixInvalidLineSensorSpecifier(final Issue issue, IssueResolutionAcceptor acceptor) {
        acceptor.accept(issue, "Set to 'left'", "Set to 'left'", null, context -> {
            updateValue(context.getXtextDocument(), issue, "left");
        });
        acceptor.accept(issue, "Set to 'right'", "Set to 'right'", null, context -> {
            updateValue(context.getXtextDocument(), issue, "right");
        });

    }
	
	@Fix(SimpleMioValidator.INVALID_BUTTON_SENSOR_SPECIFIER)
    public void fixInvalidButtonSensorSpecifier(final Issue issue, IssueResolutionAcceptor acceptor) {
        acceptor.accept(issue, "Set to 'left'", "Set to 'left'", null, context -> {
            updateValue(context.getXtextDocument(), issue, "left");
        });
        acceptor.accept(issue, "Set to 'right'", "Set to 'right'", null, context -> {
            updateValue(context.getXtextDocument(), issue, "right");
        });
        acceptor.accept(issue, "Set to 'up'", "Set to 'up'", null, context -> {
            updateValue(context.getXtextDocument(), issue, "up");
        });
        acceptor.accept(issue, "Set to 'down'", "Set to 'down'", null, context -> {
            updateValue(context.getXtextDocument(), issue, "down");
        });
        acceptor.accept(issue, "Set to 'center'", "Set to 'center'", null, context -> {
            updateValue(context.getXtextDocument(), issue, "center");
        });

    }
	
	@Fix(SimpleMioValidator.INVALID_MOTOR_SENSOR_SPECIFIER)
	public void fixInvalidMotorSensorSpecifier(final Issue issue, IssueResolutionAcceptor acceptor) {
	    acceptor.accept(issue, "Remove specifier", "Remove specifier", null, context -> {
	        updateValue(context.getXtextDocument(), issue, "");
	    });
	}

	
	@Fix(SimpleMioValidator.INVALID_SOUND_SENSOR_SPECIFIER)
	public void fixInvalidSoundSensorSpecifier(final Issue issue, IssueResolutionAcceptor acceptor) {
	    acceptor.accept(issue, "Remove specifier", "Remove specifier", null, context -> {
	        updateValue(context.getXtextDocument(), issue, "");
	    });
	}
	
	@Fix(SimpleMioValidator.INVALID_STOP_ACTION_SPECIFIER)
	public void fixInvalidStopActionSpecifier(final Issue issue, IssueResolutionAcceptor acceptor) {
	    acceptor.accept(issue, "Remove specifier", "Remove specifier", null, context -> {
	        updateValue(context.getXtextDocument(), issue, "");
	    });
	}
	
	@Fix(SimpleMioValidator.INVALID_MOVE_ACTION_SPECIFIER)
	public void fixInvalidMoveActionSpecifier(final Issue issue, IssueResolutionAcceptor acceptor) {
		acceptor.accept(issue, "Set to 'forward'", "Set to 'forward'", null, context -> {
            updateValue(context.getXtextDocument(), issue, "forward");
        });
        acceptor.accept(issue, "Set to 'backward'", "Set to 'backward'", null, context -> {
            updateValue(context.getXtextDocument(), issue, "backward");
        });
	}
	
	@Fix(SimpleMioValidator.INVALID_LED_ACTION_SPECIFIER)
	public void fixInvalidLedActionSpecifier(final Issue issue, IssueResolutionAcceptor acceptor) {
		acceptor.accept(issue, "Set to 'red'", "Set to 'red'", null, context -> {
            updateValue(context.getXtextDocument(), issue, "red");
        });
        acceptor.accept(issue, "Set to 'green'", "Set to 'green'", null, context -> {
            updateValue(context.getXtextDocument(), issue, "green");
        });
        acceptor.accept(issue, "Set to 'blue'", "Set to 'blue'", null, context -> {
            updateValue(context.getXtextDocument(), issue, "blue");
        });
	}
	
	@Fix(SimpleMioValidator.INVALID_TURN_ACTION_SPECIFIER)
	public void fixInvalidTurnActionSpecifier(final Issue issue, IssueResolutionAcceptor acceptor) {
		acceptor.accept(issue, "Set to 'left'", "Set to 'left'", null, context -> {
            updateValue(context.getXtextDocument(), issue, "left");
        });
        acceptor.accept(issue, "Set to 'right'", "Set to 'right'", null, context -> {
            updateValue(context.getXtextDocument(), issue, "right");
        });
	}					

	@Fix(SimpleMioValidator.INVALID_INTENSITY)
	public void fixInvalidIntensity(final Issue issue, IssueResolutionAcceptor acceptor) {
		acceptor.accept(issue, "Remove Intensity", "Remove Intensity", null, context -> {
	        updateValue(context.getXtextDocument(), issue, "");
	    });
	}
	
	@Fix(SimpleMioValidator.INVALID_VALUE_INTENSITY)
	public void fixInvalidValueIntensity(final Issue issue, IssueResolutionAcceptor acceptor) {
		acceptor.accept(issue, "Set to minimum 0", "Set to minimum 0", null, context -> {
			updateValue(context.getXtextDocument(), issue, "0");
	    });
	    acceptor.accept(issue, "Set to intermediate 5", "Set to intermediate 5", null, context -> {
	    	updateValue(context.getXtextDocument(), issue, "5");
	    });
	    acceptor.accept(issue, "Set to maximum 10", "Set to maximum 10", null, context -> {
	    	updateValue(context.getXtextDocument(), issue, "10");
	    });
	}
	
	
	@Fix(SimpleMioValidator.MISSING_BUTTON_SPECIFIER)
	public void fixMissingButtonSpecifier(final Issue issue, IssueResolutionAcceptor acceptor) {
		acceptor.accept(issue, "Add 'left'", "Add 'left'", null, context -> {
            insertValue(context.getXtextDocument(), issue, "left");
        });
        acceptor.accept(issue, "Add 'right'", "Add 'right'", null, context -> {
            insertValue(context.getXtextDocument(), issue, "right");
        });
        acceptor.accept(issue, "Add 'up'", "Add 'up'", null, context -> {
            insertValue(context.getXtextDocument(), issue, "up");
        });
        acceptor.accept(issue, "Add 'down'", "Add 'down'", null, context -> {
            insertValue(context.getXtextDocument(), issue, "down");
        });
        acceptor.accept(issue, "Add 'center'", "Add 'center'", null, context -> {
            insertValue(context.getXtextDocument(), issue, "center");
        });
	}
	
	@Fix(SimpleMioValidator.MISSING_LINE_SPECIFIER)
	public void fixMissingLineSpecifier(final Issue issue, IssueResolutionAcceptor acceptor) {
		acceptor.accept(issue, "Add 'left'", "Add 'left'", null, context -> {
			insertValue(context.getXtextDocument(), issue, "left");
        });
        acceptor.accept(issue, "Add  'right'", "Add  'right'", null, context -> {
        	insertValue(context.getXtextDocument(), issue, "right");
        });
	}
	
	@Fix(SimpleMioValidator.MISSING_OBSTACLE_SPECIFIER)
	public void fixMissingObstacleSpecifier(final Issue issue, IssueResolutionAcceptor acceptor) {
		acceptor.accept(issue, "Add 'front'", "Add 'front'", null, context -> {
			insertValue(context.getXtextDocument(), issue, "front");
        });
        acceptor.accept(issue, "Add 'left'", "Add 'left'", null, context -> {
        	insertValue(context.getXtextDocument(), issue, "left");
        });
        acceptor.accept(issue, "Add 'right'", "Add 'right'", null, context -> {
        	insertValue(context.getXtextDocument(), issue, "right");
        });
        acceptor.accept(issue, "Add 'back'", "Add 'back'", null, context -> {
        	insertValue(context.getXtextDocument(), issue, "back");
        });
	}
	
	@Fix(SimpleMioValidator.MISSING_MOVE_SPECIFIER)
	public void fixMissingMoveSpecifier(final Issue issue, IssueResolutionAcceptor acceptor) {
		acceptor.accept(issue, "Add 'forward'", "Add 'forward'", null, context -> {
			insertValue(context.getXtextDocument(), issue, "forward");
        });
        acceptor.accept(issue, "Add 'backward'", "Add 'backward'", null, context -> {
        	insertValue(context.getXtextDocument(), issue, "backward");
        });
	}
	
	@Fix(SimpleMioValidator.MISSING_LED_SPECIFIER)
	public void fixMissingLedSpecifier(final Issue issue, IssueResolutionAcceptor acceptor) {
		acceptor.accept(issue, "Add 'red'", "Add 'red'", null, context -> {
			insertValue(context.getXtextDocument(), issue, "red");
        });
        acceptor.accept(issue, "Add 'green'", "Add 'green'", null, context -> {
        	insertValue(context.getXtextDocument(), issue, "green");
        });
        acceptor.accept(issue, "Add 'blue'", "Add 'blue'", null, context -> {
        	insertValue(context.getXtextDocument(), issue, "blue");
        });
	}
	
	@Fix(SimpleMioValidator.MISSING_TURN_SPECIFIER)
	public void fixMissingTurnSpecifier(final Issue issue, IssueResolutionAcceptor acceptor) {
		acceptor.accept(issue, "Add 'left'", "Add 'left'", null, context -> {
			insertValue(context.getXtextDocument(), issue, "left");
        });
        acceptor.accept(issue, "Add 'right'", "Add 'right'", null, context -> {
        	insertValue(context.getXtextDocument(), issue, "right");
        });
	}
	protected void updateValue(IXtextDocument iXtextDocument, Issue issue, String newSpecifier) throws BadLocationException {
        int offset = issue.getOffset();
        int length = issue.getLength();
        iXtextDocument.replace(offset, length, newSpecifier);
    }
	
	protected void insertValue(IXtextDocument iXtextDocument, Issue issue, String newSpecifier) throws BadLocationException {
        int offset = issue.getOffset() + issue.getLength();
        iXtextDocument.replace(offset, 0, " " + newSpecifier);
    }
}
